{
    "sourceFile": "lib/utils/widgets/drawerSideCustom.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1694888079373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1694888533552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n import 'package:essential_control_pc/utils/bloc/dark_mode/dark_mode_bloc.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n \r\n+import '../../style/styles/dark_ligth_theme.dart';\r\n+\r\n class DrawerSideCustom extends StatefulWidget {\r\n   const DrawerSideCustom(\r\n       {Key? key,\r\n       required this.context,\r\n@@ -84,21 +86,11 @@\n                       ? adminUserInfo()\r\n                       : const SizedBox(\r\n                           width: 0,\r\n                         ),\r\n-                  _assingFarm\r\n-                      ? goFarms(context)\r\n-                      : const SizedBox(\r\n-                          width: 0,\r\n-                        ),\r\n                   _adminPhotos\r\n                       ? goFilesSyncronized(context)\r\n                       : const SizedBox(width: 0),\r\n-                  _localdata\r\n-                      ? localData()\r\n-                      : const SizedBox(\r\n-                          width: 0,\r\n-                        ),\r\n                 ],\r\n               ),\r\n             ),\r\n           ),\r\n@@ -131,13 +123,13 @@\n                   \"assets/icon/logo_eliteFlower.png\",\r\n                   color: Colors.white,\r\n                 )),\r\n             const SizedBox(width: 10),\r\n-            Text(\"EliteCapture\",\r\n+            const Text(\"Essential_control PC\",\r\n                 textAlign: TextAlign.left,\r\n                 style: TextStyle(\r\n                     color: Colors.white,\r\n-                    fontSize: sizeText + 2,\r\n+                    fontSize:  13,\r\n                     fontWeight: FontWeight.w500)),\r\n           ],\r\n         ),\r\n       ),\r\n@@ -145,9 +137,9 @@\n   }\r\n \r\n   Widget goSettings(BuildContext context) {\r\n     return _getItemClick(\"assets/icon/settings.svg\", \"Configuracion\",\r\n-        UserPreferences().forzarFueraLinea, SizedBox(), () {\r\n+        true, SizedBox(), () {\r\n       if (!responsiveSize.isDesktop(context)) {\r\n         Navigator.pop(context);\r\n       }\r\n       sheetConfiguration();\r\n@@ -155,44 +147,25 @@\n   }\r\n \r\n   void sheetConfiguration() {\r\n     final darkBloc = context.read<DarkModeBloc>();\r\n-    final lineBloc = context.read<LineModeBloc>();\r\n-    final sendAutomaticBloc = context.read<SendAutomaticModeModeBloc>();\r\n-    final sizeAppBloc = context.read<SizeAppModeBloc>();\r\n-    final syncronizedBloc = context.read<SyncronizedAutomaticModeModeBloc>();\r\n \r\n     showModalBottomSheet(\r\n         backgroundColor: Colors.transparent,\r\n         context: context,\r\n         builder: (BuildContext context) {\r\n-          return BlocProvider.value(\r\n-              value: sizeAppBloc,\r\n-              child: BlocBuilder<SizeAppModeBloc, SizeAppModeState>(\r\n-                  builder: (context, state) {\r\n-                return BlocProvider.value(\r\n-                    value: darkBloc,\r\n-                    child: BlocBuilder<DarkModeBloc, DarkModeState>(\r\n+                BlocBuilder<DarkModeBloc, DarkModeState>(\r\n                         builder: (context, state) {\r\n                       return blocConfigurations(\r\n                           context,\r\n-                          lineBloc,\r\n-                          sendAutomaticBloc,\r\n-                          darkBloc,\r\n-                          sizeAppBloc,\r\n-                          syncronizedBloc);\r\n-                    }));\r\n-              }));\r\n-        });\r\n+                          darkBloc);\r\n+  });});\r\n+        }\r\n   }\r\n \r\n   Widget blocConfigurations(\r\n       BuildContext context,\r\n-      LineModeBloc lineBloc,\r\n-      SendAutomaticModeModeBloc sendAutomaticBloc,\r\n-      DarkModeBloc darkBloc,\r\n-      SizeAppModeBloc sizeAppBloc,\r\n-      SyncronizedAutomaticModeModeBloc syncronizedBloc) {\r\n+      DarkModeBloc darkBloc) {\r\n     print(\"llego a pintar las configuraciones\");\r\n \r\n     return Container(\r\n       decoration: BoxDecoration(color: Colors.transparent),\r\n@@ -203,72 +176,33 @@\n           child: SafeArea(\r\n             minimum: const EdgeInsets.only(left: 20.0, right: 20.0),\r\n             child: Wrap(\r\n               children: [\r\n+                \r\n                 BlocProvider.value(\r\n-                    value: lineBloc,\r\n-                    child: BlocBuilder<LineModeBloc, LineModeState>(\r\n-                      builder: (context, state) {\r\n-                        sizeText = UserPreferences().sizeAplicationText;\r\n-                        sizeIcons = UserPreferences().sizeAplication;\r\n-                        return lineMode(context);\r\n-                      },\r\n-                    )),\r\n-                BlocProvider.value(\r\n-                    value: sendAutomaticBloc,\r\n-                    child: BlocBuilder<SendAutomaticModeModeBloc,\r\n-                        SendAutomaticModeState>(\r\n-                      builder: (context, state) {\r\n-                        sizeText = UserPreferences().sizeAplicationText;\r\n-                        sizeIcons = UserPreferences().sizeAplication;\r\n-                        return sendAutomatic(context);\r\n-                      },\r\n-                    )),\r\n-                BlocProvider.value(\r\n-                    value: syncronizedBloc,\r\n-                    child: BlocBuilder<SyncronizedAutomaticModeModeBloc,\r\n-                        SyncronizedAutomaticModeState>(\r\n-                      builder: (context, state) {\r\n-                        sizeText = UserPreferences().sizeAplicationText;\r\n-                        sizeIcons = UserPreferences().sizeAplication;\r\n-                        return syncronizedAutomatic(context);\r\n-                      },\r\n-                    )),\r\n-                BlocProvider.value(\r\n                     value: darkBloc,\r\n                     child: BlocBuilder<DarkModeBloc, DarkModeState>(\r\n                       builder: (context, state) {\r\n-                        sizeText = UserPreferences().sizeAplicationText;\r\n-                        sizeIcons = UserPreferences().sizeAplication;\r\n                         return darkMode(context);\r\n                       },\r\n                     )),\r\n-                BlocProvider.value(\r\n+                /*BlocProvider.value(\r\n                     value: sizeAppBloc,\r\n                     child: BlocBuilder<SizeAppModeBloc, SizeAppModeState>(\r\n                       builder: (context, state) {\r\n                         sizeText = UserPreferences().sizeAplicationText;\r\n                         sizeIcons = UserPreferences().sizeAplication;\r\n                         return _getItemSlider(context);\r\n                       },\r\n-                    )),\r\n+                    )),*/\r\n               ],\r\n             ),\r\n           ),\r\n         ),\r\n       ),\r\n     );\r\n   }\r\n \r\n-  Widget goFarms(BuildContext context) {\r\n-    return _getItemClick(\"assets/icon/índice.svg\", \"Administraciòn de fincas\",\r\n-        UserPreferences().forzarFueraLinea, SizedBox(), () {\r\n-      Navigator.pop(context);\r\n-      Navigator.of(context).pushNamedAndRemoveUntil(\r\n-          \"FarmAsignationPage\", (Route<dynamic> route) => false,\r\n-          arguments: routePaint);\r\n-    });\r\n-  }\r\n \r\n   Widget goVersionAdmin(BuildContext context) {\r\n     return _getItemClick(\"assets/icon/updateappicon.svg\",\r\n         \"Comprobar nuevas versiones\", false, SizedBox(), () {\r\n@@ -286,12 +220,9 @@\n           pathImageForSuccess: 'assets/illustrations/successapp.svg');\r\n     });\r\n   }\r\n \r\n-  Future initialPath() async {\r\n-    Directory? appDirectory = await getExternalStorageDirectory();\r\n-    pathSended = Directory(appDirectory!.path).path;\r\n-  }\r\n+  \r\n \r\n   Widget goSession(BuildContext context) {\r\n     return _getItemClick(\"assets/icon/índice.svg\", \"Sesion\",\r\n         UserPreferences().forzarFueraLinea, SizedBox(), () {\r\n"
                },
                {
                    "date": 1694888551141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n     showModalBottomSheet(\r\n         backgroundColor: Colors.transparent,\r\n         context: context,\r\n         builder: (BuildContext context) {\r\n-                BlocBuilder<DarkModeBloc, DarkModeState>(\r\n+               return BlocBuilder<DarkModeBloc, DarkModeState>(\r\n                         builder: (context, state) {\r\n                       return blocConfigurations(\r\n                           context,\r\n                           darkBloc);\r\n"
                },
                {
                    "date": 1694888557611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,8 @@\n   Widget build(BuildContext context) {\r\n     return MultiBlocListener(listeners: [\r\n       BlocListener<DarkModeBloc, DarkModeState>(\r\n         listener: (context, state) {\r\n-          \r\n           setState(() {});\r\n         },\r\n       )\r\n     ], child: exampleDrawer(context));\r\n"
                },
                {
                    "date": 1694888879125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,10 @@\n import 'dart:async';\r\n import 'dart:io';\r\n import 'package:essential_control_pc/utils/bloc/dark_mode/dark_mode_bloc.dart';\r\n+import 'package:essential_control_pc/utils/helpers/response_size.dart';\r\n+import 'package:essential_control_pc/utils/shared_preferences/s_p_settings.dart';\r\n+import 'package:essential_control_pc/utils/widgets/switchCustom.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n \r\n import '../../style/styles/dark_ligth_theme.dart';\r\n@@ -86,11 +89,8 @@\n                       ? adminUserInfo()\r\n                       : const SizedBox(\r\n                           width: 0,\r\n                         ),\r\n-                  _adminPhotos\r\n-                      ? goFilesSyncronized(context)\r\n-                      : const SizedBox(width: 0),\r\n                 ],\r\n               ),\r\n             ),\r\n           ),\r\n@@ -98,9 +98,8 @@\n           Align(\r\n               alignment: FractionalOffset.bottomCenter,\r\n               child: Column(\r\n                 children: <Widget>[\r\n-                  goVersionAdmin(context),\r\n                   goSettings(context),\r\n                   informacionDevicesApp(),\r\n                   _closeSesion ? closeSesion() : const SizedBox(width: 0),\r\n                 ],\r\n@@ -202,98 +201,15 @@\n     );\r\n   }\r\n \r\n \r\n-  Widget goVersionAdmin(BuildContext context) {\r\n-    return _getItemClick(\"assets/icon/updateappicon.svg\",\r\n-        \"Comprobar nuevas versiones\", false, SizedBox(), () {\r\n-      AdminVersionApk().validateVersion(\r\n-          context: context,\r\n-          token: UserPreferences().token,\r\n-          path: pathSended,\r\n-          oldVersion: CONST.VERSION.split(\" \")[1],\r\n-          nameApk: CONST.NAMEAPP,\r\n-          nameApp: CONST.IDAPP,\r\n-          backGround: darkLightTheme().getBackGround(),\r\n-          textColor: darkLightTheme().greyDetail(),\r\n-          primaryColor: darkLightTheme().getPrimaryColor(),\r\n-          pathImageForUpdate: 'assets/illustrations/updateapp.svg',\r\n-          pathImageForSuccess: 'assets/illustrations/successapp.svg');\r\n-    });\r\n-  }\r\n \r\n-  \r\n-\r\n-  Widget goSession(BuildContext context) {\r\n-    return _getItemClick(\"assets/icon/índice.svg\", \"Sesion\",\r\n-        UserPreferences().forzarFueraLinea, SizedBox(), () {\r\n-      Navigator.pop(context);\r\n-      Navigator.of(context).pushNamedAndRemoveUntil(\r\n-          \"FarmAsignationPage\", (Route<dynamic> route) => false,\r\n-          arguments: routePaint);\r\n-    });\r\n-  }\r\n-\r\n-  Widget goFilesSyncronized(BuildContext context) {\r\n-    return _getItemClick(\"assets/icon/attach.svg\", \"Sincronizaciòn de archivos\",\r\n-        UserPreferences().forzarFueraLinea, SizedBox(), () {\r\n-      Navigator.pop(context);\r\n-      Navigator.of(context).pushNamedAndRemoveUntil(\r\n-          \"FileSyncronizedPage\", (Route<dynamic> route) => false,\r\n-          arguments: routePaint);\r\n-    });\r\n-  }\r\n-\r\n-  Widget sendAutomatic(BuildContext context) {\r\n-    return _getItem(\r\n-        \"assets/icon/send.svg\",\r\n-        \"Envio automatico\",\r\n-        UserPreferences().envioAutomatico,\r\n-        SwitchCustom(UserPreferences().envioAutomatico, () {\r\n-          context.read<SendAutomaticModeModeBloc>().add(sendAutomaticChange());\r\n-        }, () {\r\n-          context.read<SendAutomaticModeModeBloc>().add(sendAutomaticChange());\r\n-        }));\r\n-  }\r\n-\r\n-  Widget syncronizedAutomatic(BuildContext context) {\r\n-    return _getItem(\r\n-        \"assets/icon/download.svg\",\r\n-        \"Descarga automatica inicial\",\r\n-        UserPreferences().syncronizedAutomatic,\r\n-        SwitchCustom(UserPreferences().syncronizedAutomatic, () {\r\n-          context\r\n-              .read<SyncronizedAutomaticModeModeBloc>()\r\n-              .add(syncronizedAutomaticChange());\r\n-        }, () {\r\n-          context\r\n-              .read<SyncronizedAutomaticModeModeBloc>()\r\n-              .add(syncronizedAutomaticChange());\r\n-        }));\r\n-  }\r\n-\r\n-  Widget lineMode(BuildContext context) {\r\n-    return _getItem(\r\n-        \"assets/icon/wifi_block.svg\",\r\n-        \"Fuera de linea\",\r\n-        UserPreferences().forzarFueraLinea,\r\n-        SwitchCustom(UserPreferences().forzarFueraLinea, () {\r\n-          UserPreferences().forzarFueraLinea = false;\r\n-          context.read<LineModeBloc>().add(LineModeCHange());\r\n-          setState(() {});\r\n-        }, () {\r\n-          UserPreferences().forzarFueraLinea = true;\r\n-          context.read<LineModeBloc>().add(LineModeCHange());\r\n-          setState(() {});\r\n-        }));\r\n-  }\r\n-\r\n   Widget darkMode(BuildContext context) {\r\n     return _getItem(\r\n         \"assets/icon/dark_mode.svg\",\r\n         \"Modo oscuro\",\r\n-        UserPreferences().onDarkTheme,\r\n-        SwitchCustom(UserPreferences().onDarkTheme, () {\r\n+        SharedPrerencesSettins().onDarkTheme,\r\n+        SwitchCustom(SharedPrerencesSettins().onDarkTheme, () {\r\n           isDarkSwitched = !isDarkSwitched;\r\n           context.read<DarkModeBloc>().add(DarkModeChange());\r\n         }, () {\r\n           isDarkSwitched = !isDarkSwitched;\r\n@@ -309,9 +225,9 @@\n             Padding(\r\n               padding: const EdgeInsets.only(\r\n                   left: 15.0, top: 10.0, bottom: 10.0, right: 10.0),\r\n               child: buildSvgPicture(\"assets/icon/size.svg\",\r\n-                  darkLightTheme().greyDetail(), sizeIcons),\r\n+                  darkLightTheme().greyDetail(), 10),\r\n             ),\r\n             Expanded(\r\n               child: Column(\r\n                   crossAxisAlignment: CrossAxisAlignment.start,\r\n@@ -319,9 +235,9 @@\n                     Text(\"Tamaño de la aplicación\",\r\n                         textAlign: TextAlign.left,\r\n                         style: TextStyle(\r\n                             color: darkLightTheme().textPrimary(),\r\n-                            fontSize: sizeText)),\r\n+                            fontSize: 10)),\r\n                   ]),\r\n             )\r\n           ],\r\n         ),\r\n@@ -604,31 +520,9 @@\n             child: dialogWaitCustom(context: context),\r\n             onWillPop: () => Future.value(false)));\r\n   }\r\n \r\n-  Widget closeSesion() {\r\n-    return Container(\r\n-        child: ListTile(\r\n-      leading: Icon(\r\n-        Icons.exit_to_app_outlined,\r\n-        color: Colors.redAccent,\r\n-        size: sizeIcons,\r\n-      ),\r\n-      title: Text(\r\n-        'Cerrar sesion',\r\n-        style: TextStyle(color: Colors.redAccent, fontSize: sizeText),\r\n-      ),\r\n-      onTap: () => {\r\n-        Navigator.pushAndRemoveUntil(\r\n-            widget.context,\r\n-            MaterialPageRoute(\r\n-                builder: (BuildContext context) => const LoginPage()),\r\n-            (Route<dynamic> route) => false),\r\n-        snackBarCustom()\r\n-            .showSnackBar(context, 'Sesion cerrada con exito', \"success\")\r\n-      },\r\n-    ));\r\n-  }\r\n+  \r\n \r\n   SvgPicture buildSvgPicture(String path, Color color, double size) {\r\n     return SvgPicture.asset(\r\n       path,\r\n@@ -636,5 +530,5 @@\n       allowDrawingOutsideViewBox: true,\r\n       color: color,\r\n     );\r\n   }\r\n-}\r\n+\r\n"
                },
                {
                    "date": 1694889240001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import 'package:essential_control_pc/utils/shared_preferences/s_p_settings.dart';\r\n import 'package:essential_control_pc/utils/widgets/switchCustom.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import 'package:flutter_svg/svg.dart';\r\n \r\n import '../../style/styles/dark_ligth_theme.dart';\r\n \r\n class DrawerSideCustom extends StatefulWidget {\r\n@@ -59,8 +60,10 @@\n       this.routePaint);\r\n \r\n   final scaffoldKey = GlobalKey<ScaffoldState>();\r\n \r\n+  double sizeIcons = 10, sizeText = 13;\r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return MultiBlocListener(listeners: [\r\n       BlocListener<DarkModeBloc, DarkModeState>(\r\n@@ -100,9 +103,8 @@\n               child: Column(\r\n                 children: <Widget>[\r\n                   goSettings(context),\r\n                   informacionDevicesApp(),\r\n-                  _closeSesion ? closeSesion() : const SizedBox(width: 0),\r\n                 ],\r\n               ))\r\n         ],\r\n       ),\r\n@@ -157,107 +159,92 @@\n             return blocConfigurations(context, darkBloc);\r\n           });\r\n         });\r\n   }\r\n-}\r\n \r\n-Widget blocConfigurations(BuildContext context, DarkModeBloc darkBloc) {\r\n-  print(\"llego a pintar las configuraciones\");\r\n+  Widget blocConfigurations(BuildContext context, DarkModeBloc darkBloc) {\r\n+    print(\"llego a pintar las configuraciones\");\r\n \r\n-  return Container(\r\n-    decoration: BoxDecoration(color: Colors.transparent),\r\n-    child: FractionallySizedBox(\r\n-      widthFactor: responsiveSize.isDesktop(context) ? 0.30 : 1,\r\n-      child: Container(\r\n-        decoration: BoxDecoration(color: darkLightTheme().getBackGround()),\r\n-        child: SafeArea(\r\n-          minimum: const EdgeInsets.only(left: 20.0, right: 20.0),\r\n-          child: Wrap(\r\n-            children: [\r\n-              BlocProvider.value(\r\n-                  value: darkBloc,\r\n-                  child: BlocBuilder<DarkModeBloc, DarkModeState>(\r\n-                    builder: (context, state) {\r\n-                      return darkMode(context);\r\n-                    },\r\n-                  )),\r\n-              /*BlocProvider.value(\r\n+    return Container(\r\n+      decoration: BoxDecoration(color: Colors.transparent),\r\n+      child: FractionallySizedBox(\r\n+        widthFactor: responsiveSize.isDesktop(context) ? 0.30 : 1,\r\n+        child: Container(\r\n+          decoration: BoxDecoration(color: darkLightTheme().getBackGround()),\r\n+          child: SafeArea(\r\n+            minimum: const EdgeInsets.only(left: 20.0, right: 20.0),\r\n+            child: Wrap(\r\n+              children: [\r\n+                BlocProvider.value(\r\n+                    value: darkBloc,\r\n+                    child: BlocBuilder<DarkModeBloc, DarkModeState>(\r\n+                      builder: (context, state) {\r\n+                        return darkMode(context);\r\n+                      },\r\n+                    )),\r\n+                /*BlocProvider.value(\r\n                     value: sizeAppBloc,\r\n                     child: BlocBuilder<SizeAppModeBloc, SizeAppModeState>(\r\n                       builder: (context, state) {\r\n                         sizeText = UserPreferences().sizeAplicationText;\r\n                         sizeIcons = UserPreferences().sizeAplication;\r\n                         return _getItemSlider(context);\r\n                       },\r\n                     )),*/\r\n-            ],\r\n+              ],\r\n+            ),\r\n           ),\r\n         ),\r\n       ),\r\n-    ),\r\n-  );\r\n-}\r\n+    );\r\n+  }\r\n \r\n-Widget darkMode(BuildContext context) {\r\n-  return _getItem(\r\n-      \"assets/icon/dark_mode.svg\",\r\n-      \"Modo oscuro\",\r\n-      SharedPrerencesSettins().onDarkTheme,\r\n-      SwitchCustom(SharedPrerencesSettins().onDarkTheme, () {\r\n-        isDarkSwitched = !isDarkSwitched;\r\n-        context.read<DarkModeBloc>().add(DarkModeChange());\r\n-      }, () {\r\n-        isDarkSwitched = !isDarkSwitched;\r\n-        context.read<DarkModeBloc>().add(DarkModeChange());\r\n-      }));\r\n-}\r\n+  Widget darkMode(BuildContext context) {\r\n+    return _getItem(\r\n+        \"assets/icon/dark_mode.svg\",\r\n+        \"Modo oscuro\",\r\n+        SharedPrerencesSettins().onDarkTheme,\r\n+        SwitchCustom(SharedPrerencesSettins().onDarkTheme, () {\r\n+          isDarkSwitched = !isDarkSwitched;\r\n+          context.read<DarkModeBloc>().add(DarkModeChange());\r\n+        }, () {\r\n+          isDarkSwitched = !isDarkSwitched;\r\n+          context.read<DarkModeBloc>().add(DarkModeChange());\r\n+        }));\r\n+  }\r\n \r\n-Widget _getItemSlider(BuildContext context) {\r\n-  return Column(\r\n-    children: [\r\n-      Row(\r\n-        children: [\r\n-          Padding(\r\n-            padding: const EdgeInsets.only(\r\n-                left: 15.0, top: 10.0, bottom: 10.0, right: 10.0),\r\n-            child: buildSvgPicture(\r\n-                \"assets/icon/size.svg\", darkLightTheme().greyDetail(), 10),\r\n-          ),\r\n-          Expanded(\r\n-            child:\r\n-                Column(crossAxisAlignment: CrossAxisAlignment.start, children: [\r\n-              Text(\"Tamaño de la aplicación\",\r\n-                  textAlign: TextAlign.left,\r\n-                  style: TextStyle(\r\n-                      color: darkLightTheme().textPrimary(), fontSize: 10)),\r\n-            ]),\r\n-          )\r\n-        ],\r\n+  Widget _getItemClick(\r\n+      String path, String title, bool activate, Widget tool, Function fun) {\r\n+    return InkWell(\r\n+      onTap: () => fun(),\r\n+      child: Padding(\r\n+        padding: const EdgeInsets.only(left: 5, right: 5),\r\n+        child: Row(\r\n+          children: [\r\n+            Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child: buildSvgPicture(\r\n+                  path, darkLightTheme().greyDetail(), sizeIcons),\r\n+            ),\r\n+            Expanded(\r\n+              child: Column(\r\n+                  crossAxisAlignment: CrossAxisAlignment.start,\r\n+                  children: [\r\n+                    Text(title,\r\n+                        textAlign: TextAlign.left,\r\n+                        style: TextStyle(\r\n+                            color: darkLightTheme().textPrimary(),\r\n+                            fontSize: 13)),\r\n+                  ]),\r\n+            )\r\n+          ],\r\n+        ),\r\n       ),\r\n-      Slider(\r\n-        activeColor: darkLightTheme().getPrimaryColor(),\r\n-        inactiveColor: darkLightTheme().greyContainer(),\r\n-        thumbColor: darkLightTheme().getPrimaryColor(),\r\n-        value: _currentSliderValue,\r\n-        max: 100,\r\n-        divisions: 2,\r\n-        label: UserPreferences().sizeAplicationCurrent.round().toString(),\r\n-        onChanged: (double value) {\r\n-          _currentSliderValue = value;\r\n-          context.read<SizeAppModeBloc>().add(SizeAppModeChange(value));\r\n-          sizeIcons = UserPreferences().sizeAplication;\r\n-          sizeText = UserPreferences().sizeAplicationText;\r\n-        },\r\n-      )\r\n-    ],\r\n-  );\r\n-}\r\n+    );\r\n+  }\r\n \r\n-Widget _getItemClick(\r\n-    String path, String title, bool activate, Widget tool, Function fun) {\r\n-  return InkWell(\r\n-    onTap: () => fun(),\r\n-    child: Padding(\r\n+  Widget _getItem(String path, String title, bool activate, Widget tool) {\r\n+    return Padding(\r\n       padding: const EdgeInsets.only(left: 5, right: 5),\r\n       child: Row(\r\n         children: [\r\n           Padding(\r\n@@ -272,80 +259,50 @@\n                   textAlign: TextAlign.left,\r\n                   style: TextStyle(\r\n                       color: darkLightTheme().textPrimary(),\r\n                       fontSize: sizeText)),\r\n+              Text(activate ? \"Activado\" : \"Desactivado\",\r\n+                  textAlign: TextAlign.left,\r\n+                  style: TextStyle(\r\n+                      color: darkLightTheme().greyDetail(),\r\n+                      fontSize: sizeText - 2))\r\n             ]),\r\n-          )\r\n+          ),\r\n+          tool\r\n         ],\r\n       ),\r\n-    ),\r\n-  );\r\n-}\r\n+    );\r\n+  }\r\n \r\n-Widget _getItem(String path, String title, bool activate, Widget tool) {\r\n-  return Padding(\r\n-    padding: const EdgeInsets.only(left: 5, right: 5),\r\n-    child: Row(\r\n+  Widget informacionDevicesApp() {\r\n+    return Column(\r\n       children: [\r\n-        Padding(\r\n-          padding: const EdgeInsets.all(8.0),\r\n-          child:\r\n-              buildSvgPicture(path, darkLightTheme().greyDetail(), sizeIcons),\r\n-        ),\r\n-        Expanded(\r\n-          child:\r\n-              Column(crossAxisAlignment: CrossAxisAlignment.start, children: [\r\n-            Text(title,\r\n-                textAlign: TextAlign.left,\r\n-                style: TextStyle(\r\n-                    color: darkLightTheme().textPrimary(), fontSize: sizeText)),\r\n-            Text(activate ? \"Activado\" : \"Desactivado\",\r\n-                textAlign: TextAlign.left,\r\n-                style: TextStyle(\r\n-                    color: darkLightTheme().greyDetail(),\r\n-                    fontSize: sizeText - 2))\r\n-          ]),\r\n-        ),\r\n-        tool\r\n+        Container(\r\n+          decoration: BoxDecoration(color: darkLightTheme().greyContainer()),\r\n+          child: Padding(\r\n+            padding: const EdgeInsets.only(left: 8.0, top: 10, bottom: 10),\r\n+            child: Align(\r\n+                alignment: FractionalOffset.topLeft,\r\n+                child: Column(\r\n+                  crossAxisAlignment: CrossAxisAlignment.start,\r\n+                  children: [\r\n+                    Text(\"Usuario Sesion : User\",\r\n+                        textAlign: TextAlign.left,\r\n+                        style: TextStyle(\r\n+                            color: darkLightTheme().greyDetail(),\r\n+                            fontSize: sizeText)),\r\n+                    Text(\"Version : 1.0.0\",\r\n+                        style: TextStyle(\r\n+                            color: darkLightTheme().greyDetail(),\r\n+                            fontSize: sizeText)),\r\n+                  ],\r\n+                )),\r\n+          ),\r\n+        )\r\n       ],\r\n-    ),\r\n-  );\r\n-}\r\n+    );\r\n+  }\r\n \r\n-Widget informacionDevicesApp() {\r\n-  return Column(\r\n-    children: [\r\n-      Container(\r\n-        decoration: BoxDecoration(color: darkLightTheme().greyContainer()),\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.only(left: 8.0, top: 10, bottom: 10),\r\n-          child: Align(\r\n-              alignment: FractionalOffset.topLeft,\r\n-              child: Column(\r\n-                crossAxisAlignment: CrossAxisAlignment.start,\r\n-                children: [\r\n-                  Text(\"Usuario Sesion : ${UserPreferences().usuario}\",\r\n-                      textAlign: TextAlign.left,\r\n-                      style: TextStyle(\r\n-                          color: darkLightTheme().greyDetail(),\r\n-                          fontSize: sizeText)),\r\n-                  Text(\"Version : ${CONST.VERSION}\",\r\n-                      style: TextStyle(\r\n-                          color: darkLightTheme().greyDetail(),\r\n-                          fontSize: sizeText)),\r\n-                  Text(\r\n-                      \"Ultima sincronizacion : ${UserPreferences().lastSyncronized}\",\r\n-                      style: TextStyle(\r\n-                          color: darkLightTheme().greyDetail(),\r\n-                          fontSize: sizeText))\r\n-                ],\r\n-              )),\r\n-        ),\r\n-      )\r\n-    ],\r\n-  );\r\n-}\r\n-\r\n /*\r\n \r\n Text(\"Device IMEI : ${UserPreferences().imei}\",\r\n                         style: TextStyle(\r\n@@ -362,39 +319,39 @@\n                             fontSize: sizeText))\r\n \r\n   */\r\n \r\n-ListTile adminUserInfo() {\r\n-  return ListTile(\r\n-    leading: Icon(\r\n-      Icons.perm_identity,\r\n-      color: darkLightTheme().textPrimary(),\r\n-      size: 25,\r\n-    ),\r\n-    title: Text(\r\n-      'Información de la sesion',\r\n-      style:\r\n-          TextStyle(color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n-    ),\r\n-    onTap: () {},\r\n-  );\r\n-}\r\n+  ListTile adminUserInfo() {\r\n+    return ListTile(\r\n+      leading: Icon(\r\n+        Icons.perm_identity,\r\n+        color: darkLightTheme().textPrimary(),\r\n+        size: 25,\r\n+      ),\r\n+      title: Text(\r\n+        'Información de la sesion',\r\n+        style: TextStyle(\r\n+            color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n+      ),\r\n+      onTap: () {},\r\n+    );\r\n+  }\r\n \r\n-ListTile assingFarm() {\r\n-  return ListTile(\r\n-    leading: buildSvgPicture(\"assets/icon/índice.svg\",\r\n-        darkLightTheme().textPrimary(), sizeText + 12),\r\n-    title: Text(\r\n-      'Administración de fincas',\r\n-      style:\r\n-          TextStyle(color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n-    ),\r\n-    onTap: () {\r\n-      if (responsiveSize.isMobile(context)) {\r\n-        Navigator.pop(context);\r\n-      }\r\n+  ListTile assingFarm() {\r\n+    return ListTile(\r\n+      leading: buildSvgPicture(\"assets/icon/índice.svg\",\r\n+          darkLightTheme().textPrimary(), sizeText + 12),\r\n+      title: Text(\r\n+        'Administración de fincas',\r\n+        style: TextStyle(\r\n+            color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n+      ),\r\n+      onTap: () {\r\n+        if (responsiveSize.isMobile(context)) {\r\n+          Navigator.pop(context);\r\n+        }\r\n \r\n-      /*popCustom(\r\n+        /*popCustom(\r\n                 context,\r\n                 Text(\"Administracion de fincas\",\r\n                     style: TextStyle(\r\n                         color: darkLightTheme().textPrimary(),\r\n@@ -403,119 +360,66 @@\n                 //farmAsination(),\r\n                 (){},\r\n                 Container())\r\n             .dialog();*/\r\n-    },\r\n-  );\r\n-}\r\n+      },\r\n+    );\r\n+  }\r\n \r\n-ListTile localData() {\r\n-  return ListTile(\r\n-      leading: buildSvgPicture(\r\n-          \"assets/icon/data_local.svg\", darkLightTheme().textPrimary(), 25),\r\n-      title: Text(\r\n-        'Datos de la aplicación',\r\n-        style: TextStyle(\r\n-            color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n-      ));\r\n-}\r\n+  ListTile localData() {\r\n+    return ListTile(\r\n+        leading: buildSvgPicture(\r\n+            \"assets/icon/data_local.svg\", darkLightTheme().textPrimary(), 25),\r\n+        title: Text(\r\n+          'Datos de la aplicación',\r\n+          style: TextStyle(\r\n+              color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n+        ));\r\n+  }\r\n \r\n-InkWell blockedWifi() {\r\n-  isSwitched = UserPreferences().forzarFueraLinea;\r\n-  return InkWell(\r\n-    child: ListTile(\r\n-      leading: buildSvgPicture(\r\n-          \"assets/icon/wifi_block.svg\", darkLightTheme().textPrimary(), 25),\r\n-      title: Text(\r\n-        'forzar fuera de linea',\r\n-        style: TextStyle(\r\n-            color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n-      ),\r\n-      subtitle: Text(\r\n-        isSwitched ? \"configuracion activada\" : \"\",\r\n-        style: TextStyle(\r\n-            color: darkLightTheme().orange(),\r\n-            fontSize: sizeText - 2,\r\n-            fontWeight: FontWeight.bold),\r\n-      ),\r\n-      trailing: Switch(\r\n-        activeColor: darkLightTheme().getPrimaryColor(),\r\n-        value: isSwitched,\r\n-        onChanged: (value) {\r\n+  InkWell darkTheme(BuildContext context) {\r\n+    isDarkSwitched = SharedPrerencesSettins().onDarkTheme;\r\n+    return InkWell(\r\n+      child: ListTile(\r\n+        leading: buildSvgPicture(\r\n+            \"assets/icon/dark_mode.svg\", darkLightTheme().textPrimary(), 25),\r\n+        title: Text(\r\n+          'Modo oscuro',\r\n+          style: TextStyle(\r\n+              color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n+        ),\r\n+        subtitle: Text(\r\n+          isDarkSwitched ? \"configuracion activada\" : \"\",\r\n+          style: TextStyle(\r\n+              color: darkLightTheme().orange(),\r\n+              fontSize: sizeText - 2,\r\n+              fontWeight: FontWeight.bold),\r\n+        ),\r\n+        trailing: Switch(\r\n+          activeColor: darkLightTheme().getPrimaryColor(),\r\n+          value: isDarkSwitched,\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              isDarkSwitched = !isDarkSwitched;\r\n+              context.read<DarkModeBloc>().add(DarkModeChange());\r\n+            });\r\n+          },\r\n+        ),\r\n+        onTap: () {\r\n           setState(() {\r\n-            isSwitched = !isSwitched;\r\n-            context.read<LineModeBloc>().add(LineModeCHange());\r\n-            if (isSwitched) {\r\n-              validationOffline(context).msgOfflineForce(isSwitched);\r\n-            }\r\n-          });\r\n-        },\r\n-      ),\r\n-      onTap: () {\r\n-        setState(() {\r\n-          isSwitched = !isSwitched;\r\n-          context.read<LineModeBloc>().add(LineModeCHange());\r\n-          if (isSwitched) {\r\n-            validationOffline(context).msgOfflineForce(isSwitched);\r\n-          }\r\n-        });\r\n-      },\r\n-    ),\r\n-  );\r\n-}\r\n-\r\n-InkWell darkTheme(BuildContext context) {\r\n-  isDarkSwitched = UserPreferences().onDarkTheme;\r\n-  return InkWell(\r\n-    child: ListTile(\r\n-      leading: buildSvgPicture(\r\n-          \"assets/icon/dark_mode.svg\", darkLightTheme().textPrimary(), 25),\r\n-      title: Text(\r\n-        'Modo oscuro',\r\n-        style: TextStyle(\r\n-            color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n-      ),\r\n-      subtitle: Text(\r\n-        isDarkSwitched ? \"configuracion activada\" : \"\",\r\n-        style: TextStyle(\r\n-            color: darkLightTheme().orange(),\r\n-            fontSize: sizeText - 2,\r\n-            fontWeight: FontWeight.bold),\r\n-      ),\r\n-      trailing: Switch(\r\n-        activeColor: darkLightTheme().getPrimaryColor(),\r\n-        value: isDarkSwitched,\r\n-        onChanged: (value) {\r\n-          setState(() {\r\n             isDarkSwitched = !isDarkSwitched;\r\n             context.read<DarkModeBloc>().add(DarkModeChange());\r\n           });\r\n         },\r\n       ),\r\n-      onTap: () {\r\n-        setState(() {\r\n-          isDarkSwitched = !isDarkSwitched;\r\n-          context.read<DarkModeBloc>().add(DarkModeChange());\r\n-        });\r\n-      },\r\n-    ),\r\n-  );\r\n-}\r\n+    );\r\n+  }\r\n \r\n-Future<void> _dialogWaitProcess() async {\r\n-  ///Crea el AlertDialog con las preguntas iniciales\r\n-  await showDialog(\r\n-      barrierDismissible: true,\r\n-      context: context,\r\n-      builder: (_) => WillPopScope(\r\n-          child: dialogWaitCustom(context: context),\r\n-          onWillPop: () => Future.value(false)));\r\n+  SvgPicture buildSvgPicture(String path, Color color, double size) {\r\n+    return SvgPicture.asset(\r\n+      path,\r\n+      width: size,\r\n+      allowDrawingOutsideViewBox: true,\r\n+      color: color,\r\n+    );\r\n+  }\r\n }\r\n-\r\n-SvgPicture buildSvgPicture(String path, Color color, double size) {\r\n-  return SvgPicture.asset(\r\n-    path,\r\n-    width: size,\r\n-    allowDrawingOutsideViewBox: true,\r\n-    color: color,\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1694890103834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n       this.routePaint);\r\n \r\n   final scaffoldKey = GlobalKey<ScaffoldState>();\r\n \r\n-  double sizeIcons = 10, sizeText = 13;\r\n+  double sizeIcons = 15, sizeText = 13;\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return MultiBlocListener(listeners: [\r\n"
                }
            ],
            "date": 1694888079373,
            "name": "Commit-0",
            "content": "import 'dart:async';\r\nimport 'dart:io';\r\nimport 'package:essential_control_pc/utils/bloc/dark_mode/dark_mode_bloc.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\n\r\nclass DrawerSideCustom extends StatefulWidget {\r\n  const DrawerSideCustom(\r\n      {Key? key,\r\n      required this.context,\r\n      required this.adminUserInfo,\r\n      required this.assingFarm,\r\n      required this.adminPhotos,\r\n      required this.blockedWifi,\r\n      required this.localdata,\r\n      required this.closeSesion,\r\n      required this.routePaint})\r\n      : super(key: key);\r\n\r\n  final BuildContext context;\r\n  final bool adminUserInfo,\r\n      assingFarm,\r\n      adminPhotos,\r\n      blockedWifi,\r\n      localdata,\r\n      closeSesion;\r\n  final String routePaint;\r\n\r\n  @override\r\n  State<DrawerSideCustom> createState() => _DrawerSideCustomState(adminUserInfo,\r\n      assingFarm, adminPhotos, blockedWifi, localdata, closeSesion, routePaint);\r\n}\r\n\r\nclass _DrawerSideCustomState extends State<DrawerSideCustom> {\r\n  bool isSwitched = false; //onLine\r\n  bool isDarkSwitched = false; //theme dark\r\n\r\n  final bool _adminUserInfo,\r\n      _assingFarm,\r\n      _adminPhotos,\r\n      _blockedWifi,\r\n      _localdata,\r\n      _closeSesion;\r\n  final String routePaint;\r\n  String pathSended = \"\";\r\n\r\n  _DrawerSideCustomState(\r\n      this._adminUserInfo,\r\n      this._assingFarm,\r\n      this._adminPhotos,\r\n      this._blockedWifi,\r\n      this._localdata,\r\n      this._closeSesion,\r\n      this.routePaint);\r\n\r\n  final scaffoldKey = GlobalKey<ScaffoldState>();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MultiBlocListener(listeners: [\r\n      BlocListener<DarkModeBloc, DarkModeState>(\r\n        listener: (context, state) {\r\n          \r\n          setState(() {});\r\n        },\r\n      )\r\n    ], child: exampleDrawer(context));\r\n  }\r\n\r\n  Widget exampleDrawer(BuildContext context) {\r\n    return Drawer(\r\n      elevation: 0,\r\n      key: scaffoldKey,\r\n      backgroundColor: darkLightTheme().getBackGround(),\r\n      child: Column(\r\n        children: [\r\n          Expanded(\r\n            flex: 12,\r\n            child: SingleChildScrollView(\r\n              child: Column(\r\n                mainAxisAlignment: MainAxisAlignment.start,\r\n                children: <Widget>[\r\n                  _header(),\r\n                  _adminUserInfo\r\n                      ? adminUserInfo()\r\n                      : const SizedBox(\r\n                          width: 0,\r\n                        ),\r\n                  _assingFarm\r\n                      ? goFarms(context)\r\n                      : const SizedBox(\r\n                          width: 0,\r\n                        ),\r\n                  _adminPhotos\r\n                      ? goFilesSyncronized(context)\r\n                      : const SizedBox(width: 0),\r\n                  _localdata\r\n                      ? localData()\r\n                      : const SizedBox(\r\n                          width: 0,\r\n                        ),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n          // This container holds the align\r\n          Align(\r\n              alignment: FractionalOffset.bottomCenter,\r\n              child: Column(\r\n                children: <Widget>[\r\n                  goVersionAdmin(context),\r\n                  goSettings(context),\r\n                  informacionDevicesApp(),\r\n                  _closeSesion ? closeSesion() : const SizedBox(width: 0),\r\n                ],\r\n              ))\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _header() {\r\n    return Container(\r\n      decoration: BoxDecoration(color: darkLightTheme().getPrimaryColor()),\r\n      child: Padding(\r\n        padding: const EdgeInsets.only(top: 43, bottom: 10, left: 10),\r\n        child: Row(\r\n          children: [\r\n            SizedBox(\r\n                width: 60,\r\n                child: Image.asset(\r\n                  \"assets/icon/logo_eliteFlower.png\",\r\n                  color: Colors.white,\r\n                )),\r\n            const SizedBox(width: 10),\r\n            Text(\"EliteCapture\",\r\n                textAlign: TextAlign.left,\r\n                style: TextStyle(\r\n                    color: Colors.white,\r\n                    fontSize: sizeText + 2,\r\n                    fontWeight: FontWeight.w500)),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget goSettings(BuildContext context) {\r\n    return _getItemClick(\"assets/icon/settings.svg\", \"Configuracion\",\r\n        UserPreferences().forzarFueraLinea, SizedBox(), () {\r\n      if (!responsiveSize.isDesktop(context)) {\r\n        Navigator.pop(context);\r\n      }\r\n      sheetConfiguration();\r\n    });\r\n  }\r\n\r\n  void sheetConfiguration() {\r\n    final darkBloc = context.read<DarkModeBloc>();\r\n    final lineBloc = context.read<LineModeBloc>();\r\n    final sendAutomaticBloc = context.read<SendAutomaticModeModeBloc>();\r\n    final sizeAppBloc = context.read<SizeAppModeBloc>();\r\n    final syncronizedBloc = context.read<SyncronizedAutomaticModeModeBloc>();\r\n\r\n    showModalBottomSheet(\r\n        backgroundColor: Colors.transparent,\r\n        context: context,\r\n        builder: (BuildContext context) {\r\n          return BlocProvider.value(\r\n              value: sizeAppBloc,\r\n              child: BlocBuilder<SizeAppModeBloc, SizeAppModeState>(\r\n                  builder: (context, state) {\r\n                return BlocProvider.value(\r\n                    value: darkBloc,\r\n                    child: BlocBuilder<DarkModeBloc, DarkModeState>(\r\n                        builder: (context, state) {\r\n                      return blocConfigurations(\r\n                          context,\r\n                          lineBloc,\r\n                          sendAutomaticBloc,\r\n                          darkBloc,\r\n                          sizeAppBloc,\r\n                          syncronizedBloc);\r\n                    }));\r\n              }));\r\n        });\r\n  }\r\n\r\n  Widget blocConfigurations(\r\n      BuildContext context,\r\n      LineModeBloc lineBloc,\r\n      SendAutomaticModeModeBloc sendAutomaticBloc,\r\n      DarkModeBloc darkBloc,\r\n      SizeAppModeBloc sizeAppBloc,\r\n      SyncronizedAutomaticModeModeBloc syncronizedBloc) {\r\n    print(\"llego a pintar las configuraciones\");\r\n\r\n    return Container(\r\n      decoration: BoxDecoration(color: Colors.transparent),\r\n      child: FractionallySizedBox(\r\n        widthFactor: responsiveSize.isDesktop(context) ? 0.30 : 1,\r\n        child: Container(\r\n          decoration: BoxDecoration(color: darkLightTheme().getBackGround()),\r\n          child: SafeArea(\r\n            minimum: const EdgeInsets.only(left: 20.0, right: 20.0),\r\n            child: Wrap(\r\n              children: [\r\n                BlocProvider.value(\r\n                    value: lineBloc,\r\n                    child: BlocBuilder<LineModeBloc, LineModeState>(\r\n                      builder: (context, state) {\r\n                        sizeText = UserPreferences().sizeAplicationText;\r\n                        sizeIcons = UserPreferences().sizeAplication;\r\n                        return lineMode(context);\r\n                      },\r\n                    )),\r\n                BlocProvider.value(\r\n                    value: sendAutomaticBloc,\r\n                    child: BlocBuilder<SendAutomaticModeModeBloc,\r\n                        SendAutomaticModeState>(\r\n                      builder: (context, state) {\r\n                        sizeText = UserPreferences().sizeAplicationText;\r\n                        sizeIcons = UserPreferences().sizeAplication;\r\n                        return sendAutomatic(context);\r\n                      },\r\n                    )),\r\n                BlocProvider.value(\r\n                    value: syncronizedBloc,\r\n                    child: BlocBuilder<SyncronizedAutomaticModeModeBloc,\r\n                        SyncronizedAutomaticModeState>(\r\n                      builder: (context, state) {\r\n                        sizeText = UserPreferences().sizeAplicationText;\r\n                        sizeIcons = UserPreferences().sizeAplication;\r\n                        return syncronizedAutomatic(context);\r\n                      },\r\n                    )),\r\n                BlocProvider.value(\r\n                    value: darkBloc,\r\n                    child: BlocBuilder<DarkModeBloc, DarkModeState>(\r\n                      builder: (context, state) {\r\n                        sizeText = UserPreferences().sizeAplicationText;\r\n                        sizeIcons = UserPreferences().sizeAplication;\r\n                        return darkMode(context);\r\n                      },\r\n                    )),\r\n                BlocProvider.value(\r\n                    value: sizeAppBloc,\r\n                    child: BlocBuilder<SizeAppModeBloc, SizeAppModeState>(\r\n                      builder: (context, state) {\r\n                        sizeText = UserPreferences().sizeAplicationText;\r\n                        sizeIcons = UserPreferences().sizeAplication;\r\n                        return _getItemSlider(context);\r\n                      },\r\n                    )),\r\n              ],\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget goFarms(BuildContext context) {\r\n    return _getItemClick(\"assets/icon/índice.svg\", \"Administraciòn de fincas\",\r\n        UserPreferences().forzarFueraLinea, SizedBox(), () {\r\n      Navigator.pop(context);\r\n      Navigator.of(context).pushNamedAndRemoveUntil(\r\n          \"FarmAsignationPage\", (Route<dynamic> route) => false,\r\n          arguments: routePaint);\r\n    });\r\n  }\r\n\r\n  Widget goVersionAdmin(BuildContext context) {\r\n    return _getItemClick(\"assets/icon/updateappicon.svg\",\r\n        \"Comprobar nuevas versiones\", false, SizedBox(), () {\r\n      AdminVersionApk().validateVersion(\r\n          context: context,\r\n          token: UserPreferences().token,\r\n          path: pathSended,\r\n          oldVersion: CONST.VERSION.split(\" \")[1],\r\n          nameApk: CONST.NAMEAPP,\r\n          nameApp: CONST.IDAPP,\r\n          backGround: darkLightTheme().getBackGround(),\r\n          textColor: darkLightTheme().greyDetail(),\r\n          primaryColor: darkLightTheme().getPrimaryColor(),\r\n          pathImageForUpdate: 'assets/illustrations/updateapp.svg',\r\n          pathImageForSuccess: 'assets/illustrations/successapp.svg');\r\n    });\r\n  }\r\n\r\n  Future initialPath() async {\r\n    Directory? appDirectory = await getExternalStorageDirectory();\r\n    pathSended = Directory(appDirectory!.path).path;\r\n  }\r\n\r\n  Widget goSession(BuildContext context) {\r\n    return _getItemClick(\"assets/icon/índice.svg\", \"Sesion\",\r\n        UserPreferences().forzarFueraLinea, SizedBox(), () {\r\n      Navigator.pop(context);\r\n      Navigator.of(context).pushNamedAndRemoveUntil(\r\n          \"FarmAsignationPage\", (Route<dynamic> route) => false,\r\n          arguments: routePaint);\r\n    });\r\n  }\r\n\r\n  Widget goFilesSyncronized(BuildContext context) {\r\n    return _getItemClick(\"assets/icon/attach.svg\", \"Sincronizaciòn de archivos\",\r\n        UserPreferences().forzarFueraLinea, SizedBox(), () {\r\n      Navigator.pop(context);\r\n      Navigator.of(context).pushNamedAndRemoveUntil(\r\n          \"FileSyncronizedPage\", (Route<dynamic> route) => false,\r\n          arguments: routePaint);\r\n    });\r\n  }\r\n\r\n  Widget sendAutomatic(BuildContext context) {\r\n    return _getItem(\r\n        \"assets/icon/send.svg\",\r\n        \"Envio automatico\",\r\n        UserPreferences().envioAutomatico,\r\n        SwitchCustom(UserPreferences().envioAutomatico, () {\r\n          context.read<SendAutomaticModeModeBloc>().add(sendAutomaticChange());\r\n        }, () {\r\n          context.read<SendAutomaticModeModeBloc>().add(sendAutomaticChange());\r\n        }));\r\n  }\r\n\r\n  Widget syncronizedAutomatic(BuildContext context) {\r\n    return _getItem(\r\n        \"assets/icon/download.svg\",\r\n        \"Descarga automatica inicial\",\r\n        UserPreferences().syncronizedAutomatic,\r\n        SwitchCustom(UserPreferences().syncronizedAutomatic, () {\r\n          context\r\n              .read<SyncronizedAutomaticModeModeBloc>()\r\n              .add(syncronizedAutomaticChange());\r\n        }, () {\r\n          context\r\n              .read<SyncronizedAutomaticModeModeBloc>()\r\n              .add(syncronizedAutomaticChange());\r\n        }));\r\n  }\r\n\r\n  Widget lineMode(BuildContext context) {\r\n    return _getItem(\r\n        \"assets/icon/wifi_block.svg\",\r\n        \"Fuera de linea\",\r\n        UserPreferences().forzarFueraLinea,\r\n        SwitchCustom(UserPreferences().forzarFueraLinea, () {\r\n          UserPreferences().forzarFueraLinea = false;\r\n          context.read<LineModeBloc>().add(LineModeCHange());\r\n          setState(() {});\r\n        }, () {\r\n          UserPreferences().forzarFueraLinea = true;\r\n          context.read<LineModeBloc>().add(LineModeCHange());\r\n          setState(() {});\r\n        }));\r\n  }\r\n\r\n  Widget darkMode(BuildContext context) {\r\n    return _getItem(\r\n        \"assets/icon/dark_mode.svg\",\r\n        \"Modo oscuro\",\r\n        UserPreferences().onDarkTheme,\r\n        SwitchCustom(UserPreferences().onDarkTheme, () {\r\n          isDarkSwitched = !isDarkSwitched;\r\n          context.read<DarkModeBloc>().add(DarkModeChange());\r\n        }, () {\r\n          isDarkSwitched = !isDarkSwitched;\r\n          context.read<DarkModeBloc>().add(DarkModeChange());\r\n        }));\r\n  }\r\n\r\n  Widget _getItemSlider(BuildContext context) {\r\n    return Column(\r\n      children: [\r\n        Row(\r\n          children: [\r\n            Padding(\r\n              padding: const EdgeInsets.only(\r\n                  left: 15.0, top: 10.0, bottom: 10.0, right: 10.0),\r\n              child: buildSvgPicture(\"assets/icon/size.svg\",\r\n                  darkLightTheme().greyDetail(), sizeIcons),\r\n            ),\r\n            Expanded(\r\n              child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: [\r\n                    Text(\"Tamaño de la aplicación\",\r\n                        textAlign: TextAlign.left,\r\n                        style: TextStyle(\r\n                            color: darkLightTheme().textPrimary(),\r\n                            fontSize: sizeText)),\r\n                  ]),\r\n            )\r\n          ],\r\n        ),\r\n        Slider(\r\n          activeColor: darkLightTheme().getPrimaryColor(),\r\n          inactiveColor: darkLightTheme().greyContainer(),\r\n          thumbColor: darkLightTheme().getPrimaryColor(),\r\n          value: _currentSliderValue,\r\n          max: 100,\r\n          divisions: 2,\r\n          label: UserPreferences().sizeAplicationCurrent.round().toString(),\r\n          onChanged: (double value) {\r\n            _currentSliderValue = value;\r\n            context.read<SizeAppModeBloc>().add(SizeAppModeChange(value));\r\n            sizeIcons = UserPreferences().sizeAplication;\r\n            sizeText = UserPreferences().sizeAplicationText;\r\n          },\r\n        )\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _getItemClick(\r\n      String path, String title, bool activate, Widget tool, Function fun) {\r\n    return InkWell(\r\n      onTap: () => fun(),\r\n      child: Padding(\r\n        padding: const EdgeInsets.only(left: 5, right: 5),\r\n        child: Row(\r\n          children: [\r\n            Padding(\r\n              padding: const EdgeInsets.all(8.0),\r\n              child: buildSvgPicture(\r\n                  path, darkLightTheme().greyDetail(), sizeIcons),\r\n            ),\r\n            Expanded(\r\n              child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: [\r\n                    Text(title,\r\n                        textAlign: TextAlign.left,\r\n                        style: TextStyle(\r\n                            color: darkLightTheme().textPrimary(),\r\n                            fontSize: sizeText)),\r\n                  ]),\r\n            )\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _getItem(String path, String title, bool activate, Widget tool) {\r\n    return Padding(\r\n      padding: const EdgeInsets.only(left: 5, right: 5),\r\n      child: Row(\r\n        children: [\r\n          Padding(\r\n            padding: const EdgeInsets.all(8.0),\r\n            child:\r\n                buildSvgPicture(path, darkLightTheme().greyDetail(), sizeIcons),\r\n          ),\r\n          Expanded(\r\n            child:\r\n                Column(crossAxisAlignment: CrossAxisAlignment.start, children: [\r\n              Text(title,\r\n                  textAlign: TextAlign.left,\r\n                  style: TextStyle(\r\n                      color: darkLightTheme().textPrimary(),\r\n                      fontSize: sizeText)),\r\n              Text(activate ? \"Activado\" : \"Desactivado\",\r\n                  textAlign: TextAlign.left,\r\n                  style: TextStyle(\r\n                      color: darkLightTheme().greyDetail(),\r\n                      fontSize: sizeText - 2))\r\n            ]),\r\n          ),\r\n          tool\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget informacionDevicesApp() {\r\n    return Column(\r\n      children: [\r\n        Container(\r\n          decoration: BoxDecoration(color: darkLightTheme().greyContainer()),\r\n          child: Padding(\r\n            padding: const EdgeInsets.only(left: 8.0, top: 10, bottom: 10),\r\n            child: Align(\r\n                alignment: FractionalOffset.topLeft,\r\n                child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: [\r\n                    Text(\"Usuario Sesion : ${UserPreferences().usuario}\",\r\n                        textAlign: TextAlign.left,\r\n                        style: TextStyle(\r\n                            color: darkLightTheme().greyDetail(),\r\n                            fontSize: sizeText)),\r\n                    Text(\"Version : ${CONST.VERSION}\",\r\n                        style: TextStyle(\r\n                            color: darkLightTheme().greyDetail(),\r\n                            fontSize: sizeText)),\r\n                    Text(\r\n                        \"Ultima sincronizacion : ${UserPreferences().lastSyncronized}\",\r\n                        style: TextStyle(\r\n                            color: darkLightTheme().greyDetail(),\r\n                            fontSize: sizeText))\r\n                  ],\r\n                )),\r\n          ),\r\n        )\r\n      ],\r\n    );\r\n  }\r\n\r\n  /*\r\n\r\nText(\"Device IMEI : ${UserPreferences().imei}\",\r\n                        style: TextStyle(\r\n                            color: darkLightTheme().greyDetail(),\r\n                            fontSize: sizeText)),\r\n                    Text(\"Device MAC : ${UserPreferences().mac}\",\r\n                        style: TextStyle(\r\n                            color: darkLightTheme().greyDetail(),\r\n                            fontSize: sizeText)),\r\n                    Text(\r\n                        \"Android version : ${UserPreferences().androidVersion}\",\r\n                        style: TextStyle(\r\n                            color: darkLightTheme().greyDetail(),\r\n                            fontSize: sizeText))\r\n\r\n  */\r\n\r\n  ListTile adminUserInfo() {\r\n    return ListTile(\r\n      leading: Icon(\r\n        Icons.perm_identity,\r\n        color: darkLightTheme().textPrimary(),\r\n        size: 25,\r\n      ),\r\n      title: Text(\r\n        'Información de la sesion',\r\n        style: TextStyle(\r\n            color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n      ),\r\n      onTap: () {},\r\n    );\r\n  }\r\n\r\n  ListTile assingFarm() {\r\n    return ListTile(\r\n      leading: buildSvgPicture(\"assets/icon/índice.svg\",\r\n          darkLightTheme().textPrimary(), sizeText + 12),\r\n      title: Text(\r\n        'Administración de fincas',\r\n        style: TextStyle(\r\n            color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n      ),\r\n      onTap: () {\r\n        if (responsiveSize.isMobile(context)) {\r\n          Navigator.pop(context);\r\n        }\r\n\r\n        /*popCustom(\r\n                context,\r\n                Text(\"Administracion de fincas\",\r\n                    style: TextStyle(\r\n                        color: darkLightTheme().textPrimary(),\r\n                        fontSize: 20,\r\n                        fontWeight: FontWeight.bold)),\r\n                //farmAsination(),\r\n                (){},\r\n                Container())\r\n            .dialog();*/\r\n      },\r\n    );\r\n  }\r\n\r\n  ListTile localData() {\r\n    return ListTile(\r\n        leading: buildSvgPicture(\r\n            \"assets/icon/data_local.svg\", darkLightTheme().textPrimary(), 25),\r\n        title: Text(\r\n          'Datos de la aplicación',\r\n          style: TextStyle(\r\n              color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n        ));\r\n  }\r\n\r\n  InkWell blockedWifi() {\r\n    isSwitched = UserPreferences().forzarFueraLinea;\r\n    return InkWell(\r\n      child: ListTile(\r\n        leading: buildSvgPicture(\r\n            \"assets/icon/wifi_block.svg\", darkLightTheme().textPrimary(), 25),\r\n        title: Text(\r\n          'forzar fuera de linea',\r\n          style: TextStyle(\r\n              color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n        ),\r\n        subtitle: Text(\r\n          isSwitched ? \"configuracion activada\" : \"\",\r\n          style: TextStyle(\r\n              color: darkLightTheme().orange(),\r\n              fontSize: sizeText - 2,\r\n              fontWeight: FontWeight.bold),\r\n        ),\r\n        trailing: Switch(\r\n          activeColor: darkLightTheme().getPrimaryColor(),\r\n          value: isSwitched,\r\n          onChanged: (value) {\r\n            setState(() {\r\n              isSwitched = !isSwitched;\r\n              context.read<LineModeBloc>().add(LineModeCHange());\r\n              if (isSwitched) {\r\n                validationOffline(context).msgOfflineForce(isSwitched);\r\n              }\r\n            });\r\n          },\r\n        ),\r\n        onTap: () {\r\n          setState(() {\r\n            isSwitched = !isSwitched;\r\n            context.read<LineModeBloc>().add(LineModeCHange());\r\n            if (isSwitched) {\r\n              validationOffline(context).msgOfflineForce(isSwitched);\r\n            }\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  InkWell darkTheme(BuildContext context) {\r\n    isDarkSwitched = UserPreferences().onDarkTheme;\r\n    return InkWell(\r\n      child: ListTile(\r\n        leading: buildSvgPicture(\r\n            \"assets/icon/dark_mode.svg\", darkLightTheme().textPrimary(), 25),\r\n        title: Text(\r\n          'Modo oscuro',\r\n          style: TextStyle(\r\n              color: darkLightTheme().textPrimary(), fontSize: sizeText),\r\n        ),\r\n        subtitle: Text(\r\n          isDarkSwitched ? \"configuracion activada\" : \"\",\r\n          style: TextStyle(\r\n              color: darkLightTheme().orange(),\r\n              fontSize: sizeText - 2,\r\n              fontWeight: FontWeight.bold),\r\n        ),\r\n        trailing: Switch(\r\n          activeColor: darkLightTheme().getPrimaryColor(),\r\n          value: isDarkSwitched,\r\n          onChanged: (value) {\r\n            setState(() {\r\n              isDarkSwitched = !isDarkSwitched;\r\n              context.read<DarkModeBloc>().add(DarkModeChange());\r\n            });\r\n          },\r\n        ),\r\n        onTap: () {\r\n          setState(() {\r\n            isDarkSwitched = !isDarkSwitched;\r\n            context.read<DarkModeBloc>().add(DarkModeChange());\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<void> _dialogWaitProcess() async {\r\n    ///Crea el AlertDialog con las preguntas iniciales\r\n    await showDialog(\r\n        barrierDismissible: true,\r\n        context: context,\r\n        builder: (_) => WillPopScope(\r\n            child: dialogWaitCustom(context: context),\r\n            onWillPop: () => Future.value(false)));\r\n  }\r\n\r\n  Widget closeSesion() {\r\n    return Container(\r\n        child: ListTile(\r\n      leading: Icon(\r\n        Icons.exit_to_app_outlined,\r\n        color: Colors.redAccent,\r\n        size: sizeIcons,\r\n      ),\r\n      title: Text(\r\n        'Cerrar sesion',\r\n        style: TextStyle(color: Colors.redAccent, fontSize: sizeText),\r\n      ),\r\n      onTap: () => {\r\n        Navigator.pushAndRemoveUntil(\r\n            widget.context,\r\n            MaterialPageRoute(\r\n                builder: (BuildContext context) => const LoginPage()),\r\n            (Route<dynamic> route) => false),\r\n        snackBarCustom()\r\n            .showSnackBar(context, 'Sesion cerrada con exito', \"success\")\r\n      },\r\n    ));\r\n  }\r\n\r\n  SvgPicture buildSvgPicture(String path, Color color, double size) {\r\n    return SvgPicture.asset(\r\n      path,\r\n      width: size,\r\n      allowDrawingOutsideViewBox: true,\r\n      color: color,\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}